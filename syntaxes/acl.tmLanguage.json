{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "CustomLogic",
  "foldingStartMarker": "\\{\\s*$",
  "foldingStopMarker": "^\\s*\\}",
  "patterns": [
    {
      "name": "entity.name.type.class",
      "match": "(?<=\\b(class|component|extension|cutscene)\\s+)[a-zA-Z][a-zA-Z0-9_]*\\b",
      "captures": {
        "0": {
          "name": "entity.name.type"
        }
      }
    },
    {
      "include": "#comments"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#constants-and-special-vars"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#strings"
    }
  ],
  "repository": {
    "constants-and-special-vars": {
      "patterns": [
        {
          "name": "constant.language.acl",
          "match": "(?<!\\$)\\b(true|false|null)\\b(?!\\$)"
        },
        {
          "name": "variable.language.acl",
          "match": "(?<!\\$)\\b(self)\\b(?!\\$)"
        },
        {
          "name": "constant.numeric.acl",
          "match": "(?<!\\$)\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)\\b(?!\\$)"
        },
        {
          "include": "#class-identifier"
        },
        {
          "include": "#builtin-types"
        },
        {
          "include": "#function-identifier"
        }
      ]
    },
    "class-identifier": {
      "patterns": [
        {
          "match": "(?<!\\$)\\b(class|component|extension|cutscene)\\b(?!\\$)",
          "name": "storage.type.primitive.acl"
        }
      ]
    },
    "builtin-types": {
      "match": "(?<!\\$)\\b(Game|Network|Map|UI|Time|Convert|String|Input|Math|Random|Cutscene|Vector3|Color|Range|List|Dict)\\b(?!\\$)",
      "name": "entity.name.type.class"
    },
    "function-identifier": {
      "patterns": [
        {
          "name": "entity.name.function.acl",
          "begin": "(?:[_$]*[a-zA-Z][a-zA-Z0-9_$]*)\\s*(?=\\()",
          "end": "\\b",
          "beginCaptures": {
            "0": {
              "name": "entity.name.function"
            }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.acl",
          "match": "\\b(if|elif|else|while|for|in|wait|return)\\b"
        },
        {
          "match": "(?<!\\$)\\b(function|coroutine)\\b(?!\\$)",
          "name": "storage.type.primitive.acl"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.acl",
          "match": "(?<!\\$)\\b(is\\!?)\\b(?!\\$)"
        },
        {
          "name": "keyword.operator.comparison.acl",
          "match": "(==|!=|<=?|>=?)"
        },
        {
          "name": "keyword.operator.assignment.arithmetic.acl",
          "match": "(([+*/%-]|\\~)=)"
        },
        {
          "name": "keyword.operator.assignment.acl",
          "match": "(=)"
        },
        {
          "name": "keyword.operator.arithmetic.acl",
          "match": "(\\-|\\+|\\*|\\/|\\~\\/|%)"
        },
        {
          "name": "keyword.operator.logical.acl",
          "match": "(!|&&|\\|\\|)"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "match": "((//).*)$",
          "captures": {
            "1": {
              "name": "comment.line.double-slash.acl"
            }
          }
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.acl",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.acl",
          "match": "\\\\."
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.comma.acl",
          "match": ","
        },
        {
          "name": "punctuation.terminator.acl",
          "match": ";"
        },
        {
          "name": "punctuation.dot.acl",
          "match": "\\."
        }
      ]
    }
  },
  "scopeName": "source.acl"
}
